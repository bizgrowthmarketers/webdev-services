{"mappings":"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","sources":["src/js/form-validate.js","src/js/mobile-menu.js","src/js/modal.js","src/js/swiper.js"],"sourcesContent":["(function () {\n  // These are the constraints used to validate the form\n  var constraints = {\n    email: {\n      // Email is required\n      presence: { message: 'field is required' },\n      // and must be an email (duh)\n      email: { message: 'is not a valid email address' },\n    },\n    phone: {\n      presence: { message: 'field is required' },\n      format: {\n        // We don't allow anything that a-z and 0-9\n        pattern: '[0-9]+',\n        // but we don't care if the username is uppercase or lowercase\n        flags: 'i',\n        message: ' This phone must be in the format  099 000 00 00',\n      },\n      length: {\n        minimum: 7,\n        maximum: 13,\n      },\n    },\n    username: {\n      // You need to pick a username too\n      presence: { message: 'field is required' },\n      // And it must be between 3 and 25 characters long\n      length: {\n        minimum: 3,\n        maximum: 25,\n      },\n    },\n  };\n\n  // Hook up the form so we can prevent it from being posted\n  var form = document.querySelector('form#main');\n  var submitButton = document.querySelector('.button-order-modal');\n\n  form.addEventListener('submit', function (ev) {\n    ev.preventDefault();\n    handleFormSubmit(form);\n  });\n\n  submitButton.addEventListener('mouseleave', function (e) {\n    form.classList.remove('has-error');\n  });\n\n  // Hook up the inputs to validate on the fly\n  var inputs = document.querySelectorAll('input, textarea, select');\n  for (var i = 0; i < inputs.length; ++i) {\n    inputs.item(i).addEventListener('change', function (ev) {\n      var errors = validate(form, constraints) || {};\n      showErrorsForInput(this, errors[this.name]);\n    });\n  }\n\n  function handleFormSubmit(form, input) {\n    // validate the form against the constraints\n    var errors = validate(form, constraints);\n    // then we update the form to reflect the results\n    showErrors(form, errors || {});\n    if (!errors) {\n      showSuccess();\n    }\n  }\n\n  // Updates the inputs with the validation errors\n  function showErrors(form, errors) {\n    // We loop through all the inputs and show the errors for that input\n    _.each(\n      form.querySelectorAll('input[name], select[name]'),\n      function (input) {\n        // Since the errors can be null if no errors were found we need to handle\n        // that\n        showErrorsForInput(input, errors && errors[input.name]);\n      }\n    );\n  }\n\n  function isAllInputsEmpty() {\n    let isAllEmpty = true;\n\n    _.each(form.querySelectorAll('input[name]'), function (input) {\n      if (input.value !== '') {\n        isAllEmpty = false;\n      }\n    });\n    return isAllEmpty;\n  }\n  // Shows the errors for a specific input\n  function showErrorsForInput(input, errors) {\n    // This is the root of the input\n\n    var formGroup = closestParent(input.parentNode, 'form-group'),\n      // Find where the error messages will be insert into\n      messages = formGroup.querySelector('.messages');\n    // First we remove any old messages and resets the classes\n    resetFormGroup(formGroup);\n    // If we have errors\n    if (errors) {\n      // we first mark the group has having errors\n      if (isAllInputsEmpty()) {\n        form.classList.add('has-error');\n      }\n\n      submitButton.classList.add('has-error');\n      formGroup.classList.add('has-error');\n      // then we append all the errors\n      _.each(errors, function (error) {\n        addError(messages, error);\n      });\n    } else {\n      // otherwise we simply mark it as success\n      formGroup.classList.add('has-success');\n    }\n  }\n\n  // Recusively finds the closest parent that has the specified class\n  function closestParent(child, className) {\n    if (!child || child == document) {\n      return null;\n    }\n    if (child.classList.contains(className)) {\n      return child;\n    } else {\n      return closestParent(child.parentNode, className);\n    }\n  }\n\n  function resetFormGroup(formGroup) {\n    // Remove the success and error classes\n    form.classList.remove('has-error');\n    submitButton.classList.remove('has-error');\n    formGroup.classList.remove('has-error');\n    formGroup.classList.remove('has-success');\n    // and remove any old messages\n    _.each(formGroup.querySelectorAll('.help-block.error'), function (el) {\n      el.parentNode.removeChild(el);\n    });\n  }\n\n  // Adds the specified error with the following markup\n  // <p class=\"help-block error\"><span class=\"icon\"></><span>[message]</span></p>\n  function addError(messages, error) {\n    var icon = document.createElement('span');\n    icon.classList.add('icon-warning');\n\n    var spanErrorText = document.createElement('span');\n    spanErrorText.innerText = error;\n\n    var block = document.createElement('p');\n    block.classList.add('help-block');\n    block.classList.add('error');\n    block.appendChild(icon);\n    block.appendChild(spanErrorText);\n\n    messages.appendChild(block);\n  }\n\n  function showSuccess() {\n    // We made it \\:D/\n    form.submit();\n  }\n})();\n","(() => {\n  const refs = {\n    openModalBtn: document.querySelector('[data-menu-btn]'),\n    mobMenu: document.querySelector('[data-menu]'),\n    // navHomeRef: document.querySelector('[data-home]'),\n  };\n\n  refs.openModalBtn.addEventListener('click', toggleModal);\n  refs.mobMenu.addEventListener('click', toggleModal);\n\n  function toggleModal() {\n    refs.mobMenu.classList.toggle('is-closed');\n  }\n})();\n","const refs = {\n  openModalBtn: document.querySelectorAll('[data-modal-open]'),\n  closeModalBtn: document.querySelector('[data-modal-close]'),\n  modal: document.querySelector('[data-modal]'),\n};\n\nrefs.openModalBtn.forEach(el => el.addEventListener('click', toggleModal));\nrefs.closeModalBtn.addEventListener('click', toggleModal);\n\nfunction toggleModal() {\n  refs.modal.classList.toggle('is-hidden');\n}\n","var swiper = new Swiper(\".mySwiper\", {\n    navigation: {\n        nextEl: '.swiper-button-next',\n        prevEl: '.swiper-button-prev',\n    },\n});"],"names":["constraints","email","presence","message","phone","format","pattern","flags","length","minimum","maximum","username","form1","document","querySelector","submitButton","addEventListener","ev","form","errors","preventDefault","validate","_","each","querySelectorAll","input","showErrorsForInput","name","showErrors","submit","e","classList","remove","inputs","i","item","this","formGroup","closestParent","parentNode","messages","el","removeChild","resetFormGroup","isAllEmpty","value","isAllInputsEmpty","add","error","icon","createElement","spanErrorText","innerText","block","appendChild","addError","child","className","contains","refs","openModalBtn","mobMenu","toggleModal","toggle","$8a7e756c566dd1ea$var$refs","closeModalBtn","modal","$8a7e756c566dd1ea$var$toggleModal","forEach","Swiper","navigation","nextEl","prevEl"],"version":3,"file":"index.345e5851.js.map"}